#!/usr/bin/env node
/*jshint node:true */

var path = require("path");
var forever = require('forever-monitor');
var rc = require("rc");
var pargs = process.argv.slice(2);

var options = (function(args) {
    'use strict';

    var r = {path: "./"};
    while(args.length){
        var a = args.shift();
        if (a.indexOf("/") >Â -1) {
            r.path = a;
        } else {
            r.app = a;
        }
    }
    return r;
})(pargs);

options.path = path.resolve(options.path);

var sourceDir = __dirname;
var modulesPath = path.join(__dirname, "node_modules");

if (process.platform === "win32") {
    // Windows retains the S**T paths...
    modulesPath = path.relative(process.cwd(), modulesPath);
    sourceDir = path.relative(process.cwd(), sourceDir);
}

// Node environment
process.env.NODE_PATH= [__dirname, options.path, modulesPath, process.env.NODE_PATH].join(path.delimiter);

var foreverConf = rc("parsedev", {
    max: 1,
    command: "node",
    spawnWith: {
      customFds: [-1, -1, -1], // that forever spawns.
      setsid: false
    },
    watch:true,
    watchDirectory: options.path,
    minUptime: 1000,
    spinSleepTime: 500,
  });

require("./lib/utils").getConfiguration(options.path, options.app, function(err, keys) {
    'use strict';

    if (err) {
        // Configuration not found...
        console.error(err);
        process.exit(0);
    } else {
        
        if (foreverConf.debug) {
            foreverConf.command = "node --debug";
        }

        // Override the defaults
        foreverConf.env = process.env;
        foreverConf.options = [options.path, options.app, JSON.stringify(keys)];
        foreverConf.sourceDir = sourceDir;
        
        // Watch the path...
        if (foreverConf.watch) {
            console.log("Watching "+options.path);
            foreverConf.watchDirectory = options.path;
        }else{
            console.log("Not watching...");
        }

        var child = new (forever.Monitor)("./index.js", foreverConf);

        child.on('watch:restart', function(info) {
            console.error('Restaring script because ' + info.file + ' changed');
        });
        child.on('restart', function() {
            console.error('Forever restarting script for ' + child.times + ' time');
        });

        child.on('exit:code', function(code) {
            console.error('Forever detected script exited with code ' + code);
        });

        // Start!
        child.start();
    }
});
